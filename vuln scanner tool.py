import socket
import ssl
import urllib.request
import urllib.parse
import re
from urllib.error import HTTPError, URLError
from html.parser import HTMLParser

class LinkParser(HTMLParser):
    def __init__(self):
        super().__init__()
        self.links = []
        self.images = []

    def handle_starttag(self, tag, attrs):
        if tag == 'a':
            for attr in attrs:
                if attr[0] == 'href':
                    self.links.append(attr[1])
        elif tag == 'img':
            for attr in attrs:
                if attr[0] == 'src':
                    self.images.append(attr[1])

def scan_domain(domain):
    print("Scanning domain:", domain)
    print("------------------------------------")

    open_ports = []

    # Check for open ports
    print("Checking for open ports...")
    for port in [21, 22, 80, 443]:  # You can add more ports here
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(1)
            result = s.connect_ex((domain, port))
            if result == 0:
                print("Port {} is open".format(port))
                open_ports.append(port)
            s.close()
        except socket.error:
            pass

    # Check for SSL certificate
    print("\nChecking SSL certificate...")
    try:
        context = ssl.create_default_context()
        with urllib.request.urlopen("https://" + domain, context=context) as response:
            ssl_info = response.info()
            print("SSL certificate is valid")
            print("Certificate issuer:", ssl_info.get("issuer"))
            print("Certificate expiry date:", ssl_info.get("expiry"))
    except Exception as e:
        print("SSL certificate is invalid or expired")

    return open_ports

def attack_ftp():
    # Example attack for FTP (Port 21)
    pass

def attack_ssh():
    # Example attack for SSH (Port 22)
    pass

def attack_http():
    # Example attack for HTTP (Port 80)
    pass

def attack_https():
    # Example attack for HTTPS (Port 443)
    pass

def check_sql_injection(domain):
    print("\nChecking for SQL injection vulnerability...")
    try:
        params = urllib.parse.urlencode({'id': "1' OR '1'='1"})
        test_url = f"https://{domain}/?" + params
        response = urllib.request.urlopen(test_url)
        content = response.read().decode('utf-8')
        if "You have an error in your SQL syntax" in content:
            print("SQL Injection vulnerability found!")
        else:
            print("No SQL Injection vulnerability found")
    except Exception as e:
        print("Error occurred while checking SQL Injection:", e)

def check_xss(domain):
    print("\nChecking for XSS (Cross-Site Scripting) vulnerability...")
    try:
        params = urllib.parse.urlencode({'name': "<script>alert('XSS');</script>"})
        test_url = f"https://{domain}/?" + params
        response = urllib.request.urlopen(test_url)
        content = response.read().decode('utf-8')
        if re.search(r'<script>alert\(\'XSS\'\);</script>', content):
            print("XSS (Cross-Site Scripting) vulnerability found!")
        else:
            print("No XSS (Cross-Site Scripting) vulnerability found")
    except Exception as e:
        print("Error occurred while checking XSS:", e)

def check_token_validation(domain):
    print("\nChecking for token validation bypass...")
    try:
        test_url = f"https://{domain}/api?token=invalidtoken"
        response = urllib.request.urlopen(test_url)
        content = response.read().decode('utf-8')
        if "Access granted" in content:
            print("Token validation bypass vulnerability found!")
        else:
            print("No token validation bypass vulnerability found")
    except Exception as e:
        print("Error occurred while checking token validation bypass:", e)

def check_form_validation(domain):
    print("\nChecking for form validation...")
    try:
        test_url = f"https://{domain}/contact"
        response = urllib.request.urlopen(test_url)
        content = response.read().decode('utf-8')
        if "<form" in content:
            print("Form found on the page. Checking for validation...")
            if "required" in content:
                print("Form validation seems to be in place.")
            else:
                print("Form validation might be missing!")
        else:
            print("No form found on the page")
    except Exception as e:
        print("Error occurred while checking form validation:", e)

def check_broken_links_and_images(domain):
    print("\nChecking for broken links and images...")
    try:
        test_url = f"https://{domain}"
        response = urllib.request.urlopen(test_url)
        content = response.read().decode('utf-8')
        parser = LinkParser()
        parser.feed(content)
        broken_links = []
        broken_images = []
        for link in parser.links:
            try:
                link_url = urllib.parse.urljoin(test_url, link)
                urllib.request.urlopen(link_url)
            except (HTTPError, URLError):
                broken_links.append(link)
        for image in parser.images:
            try:
                image_url = urllib.parse.urljoin(test_url, image)
                urllib.request.urlopen(image_url)
            except (HTTPError, URLError):
                broken_images.append(image)
        if broken_links:
            print("Found broken links:")
            for link in broken_links:
                print("- " + link)
        else:
            print("No broken links found")
        if broken_images:
            print("\nFound broken images:")
            for image in broken_images:
                print("- " + image)
        else:
            print("No broken images found")
    except Exception as e:
        print("Error occurred while checking broken links and images:", e)

if __name__ == "__main__":
    domain = input("Enter domain to scan: ")
    open_ports = scan_domain(domain)
    
    for port in open_ports:
        if port == 21:
            attack_ftp()
        elif port == 22:
            attack_ssh()
        elif port == 80:
            attack_http()
        elif port == 443:
            attack_https()

    check_sql_injection(domain)
    check_xss(domain)
    check_token_validation(domain)
    check_form_validation(domain)
    check_broken_links_and_images(domain)
